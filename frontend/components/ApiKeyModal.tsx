'use client';\n\nimport React, { useState } from 'react';\nimport { useApiKey } from '../lib/contexts/ApiKeyContext';\n\nconst ApiKeyModal: React.FC = () => {\n  const { apiKey, setApiKey, isApiKeySet, isLoading } = useApiKey();\n  const [inputKey, setInputKey] = useState<string>('');\n  const [error, setError] = useState<string>('');\n\n  const handleSaveKey = () => {\n    if (!inputKey.trim()) {\n      setError('API 金鑰不能為空。');\n      return;\n    }\n    // 基本的 API 金鑰格式檢查 (示例：檢查是否以 'AIza' 開頭 - 這是 Google API 金鑰常見的前綴)\n    // 注意：這不是一個絕對可靠的驗證，僅為基本示例\n    // if (!inputKey.startsWith('AIza')) {\n    //   setError('API 金鑰格式似乎不正確。請檢查。');\n    //   return;\n    // }\n    setApiKey(inputKey);\n    setInputKey(''); // 清空輸入框\n    setError(''); // 清除錯誤信息\n  };\n\n  const handleRemoveKey = () => {\n    setApiKey(null); // 傳遞 null 以移除金鑰\n  };\n\n  // 在初次加載 localStorage 時不顯示任何內容，避免閃爍\n  if (isLoading) {\n    return <div style={{ padding: '20px', textAlign: 'center' }}>正在加載 API 金鑰狀態...</div>;\n  }\n\n  // 如果金鑰已設定，可以選擇顯示一個移除金鑰的按鈕或不顯示此模態框\n  // 這裡我們假設如果金鑰已設定，此模態框的主要輸入部分會被隱藏或改變\n  // 但為了簡單起見，如果 isApiKeySet 為 true，此組件可能根本不會被渲染 (由父組件控制)\n\n  return (\n    <div style={{ \n      position: 'fixed', top: 0, left: 0, width: '100%', height: '100%',\n      backgroundColor: 'rgba(0,0,0,0.7)', display: 'flex', \n      justifyContent: 'center', alignItems: 'center', zIndex: 1000 \n    }}>\n      <div style={{ \n        padding: '30px', background: 'white', borderRadius: '8px', \n        boxShadow: '0 4px 6px rgba(0,0,0,0.1)', minWidth: '300px', maxWidth: '500px' \n      }}>\n        <h2 style={{ marginTop: 0, marginBottom: '20px', textAlign: 'center', color: '#333' }}>API 金鑰設定</h2>\n        {!isApiKeySet ? (\n          <>\n            <p style={{ color: '#555', marginBottom: '15px' }}>請輸入您的 Google Gemini API 金鑰以使用本應用程式。</p>\n            <input \n              type="password" \n              value={inputKey} \n              onChange={(e) => setInputKey(e.target.value)} \n              placeholder="在此貼上您的 API 金鑰" \n              style={{ \n                width: 'calc(100% - 22px)', padding: '10px', marginBottom: '10px', \n                border: '1px solid #ccc', borderRadius: '4px' \n              }} \n            />\n            {error && <p style={{ color: 'red', fontSize: '0.9em', marginBottom: '10px' }}>{error}</p>}\n            <button \n              onClick={handleSaveKey} \n              style={{ \n                width: '100%', padding: '10px 15px', background: '#007bff', color: 'white', \n                border: 'none', borderRadius: '4px', cursor: 'pointer', fontSize: '1em' \n              }}\n            >\n              儲存金鑰\n            </button>\n          </>\n        ) : (\n          <>\n            <p style={{ color: 'green', textAlign: 'center', marginBottom: '15px' }}>API 金鑰已設定。</p>\n            <p style={{ wordBreak: 'break-all', background: '#f0f0f0', padding: '8px', borderRadius: '4px', fontSize: '0.9em' }}>\n              目前金鑰: {apiKey ? apiKey.substring(0, 4) + '...' + apiKey.substring(apiKey.length - 4) : '無'}\n            </p>\n            <button \n              onClick={handleRemoveKey} \n              style={{ \n                width: '100%', padding: '10px 15px', background: '#dc3545', color: 'white', \n                border: 'none', borderRadius: '4px', cursor: 'pointer', fontSize: '1em', marginTop: '10px' \n              }}\n            >\n              移除金鑰\n            </button>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ApiKeyModal;\n
