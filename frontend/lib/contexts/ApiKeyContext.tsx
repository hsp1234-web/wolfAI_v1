'use client';\n\nimport React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\n\ninterface ApiKeyContextType {\n  apiKey: string | null;\n  setApiKey: (key: string | null) => void;\n  isApiKeySet: boolean;\n  isLoading: boolean; // To handle initial loading from localStorage\n}\n\nconst ApiKeyContext = createContext<ApiKeyContextType | undefined>(undefined);\n\nexport const ApiKeyProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [apiKey, setApiKeyInternal] = useState<string | null>(null);\n  const [isApiKeySet, setIsApiKeySet] = useState<boolean>(false);\n  const [isLoading, setIsLoading] = useState<boolean>(true); // Start with loading true\n\n  useEffect(() => {\n    // Try to load API key from localStorage on initial load\n    try {\n      const storedApiKey = localStorage.getItem('googleApiKey');\n      if (storedApiKey) {\n        setApiKeyInternal(storedApiKey);\n        setIsApiKeySet(true);\n      }\n    } catch (error) {\n      console.error('無法讀取 localStorage 中的 API 金鑰:', error);\n    }\n    setIsLoading(false); // Done loading\n  }, []);\n\n  const setApiKey = (key: string | null) => {\n    setIsLoading(true);\n    if (key) {\n      try {\n        localStorage.setItem('googleApiKey', key);\n        setApiKeyInternal(key);\n        setIsApiKeySet(true);\n        console.log('API 金鑰已儲存。');\n      } catch (error) {\n        console.error('無法儲存 API 金鑰到 localStorage:', error);\n        // Potentially show an error to the user\n      }\n    } else {\n      try {\n        localStorage.removeItem('googleApiKey');\n        setApiKeyInternal(null);\n        setIsApiKeySet(false);\n        console.log('API 金鑰已移除。');\n      } catch (error) {\n        console.error('無法從 localStorage 移除 API 金鑰:', error);\n      }\n    }\n    setIsLoading(false);\n  };\n\n  return (\n    <ApiKeyContext.Provider value={{ apiKey, setApiKey, isApiKeySet, isLoading }}>\n      {children}\n    </ApiKeyContext.Provider>\n  );\n};\n\nexport const useApiKey = (): ApiKeyContextType => {\n  const context = useContext(ApiKeyContext);\n  if (context === undefined) {\n    throw new Error('useApiKey 必須在 ApiKeyProvider 內部使用');\n  }\n  return context;\n};\n
